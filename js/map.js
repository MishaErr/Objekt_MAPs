// === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã ===
const map = L.map('map').setView([55.75, 37.62], 10);
L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
  attribution: '¬© OpenStreetMap contributors'
}).addTo(map);

// === –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–∞ –ª–µ–≥–µ–Ω–¥—ã ===
const LegendControl = L.Control.extend({
  options: { position: 'bottomleft' },
  onAdd: function() {
    const container = L.DomUtil.create('div', 'leaflet-control legend');
    container.innerHTML = `
      <span class="legend-title">–õ–µ–≥–µ–Ω–¥–∞</span>
      <div id="legend-items"></div>
      <hr>
      <div style="margin-top:6px;">
        <label><input type="radio" name="travel" value="driving" checked> üöó –ê–≤—Ç–æ</label><br>
        <label><input type="radio" name="travel" value="foot"> üö∂ –ü–µ—à–∫–æ–º</label>
      </div>
      <small style="color:#555;">–ö–ª–∏–∫–Ω–∏ –Ω–∞ –∫–∞—Ä—Ç–µ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞</small>
    `;
    L.DomEvent.disableClickPropagation(container);
    L.DomEvent.disableScrollPropagation(container);
    return container;
  }
});
const legendControl = new LegendControl();
map.addControl(legendControl);

// === –ó–∞–≥—Ä—É–∑–∫–∞ KML ===
const layerObjects = {};
fetch('layers.json')
  .then(r => r.json())
  .then(layers => {
    const boundsGroup = L.featureGroup();

    layers.forEach(layer => {
      const url = 'kml_layers/' + layer.file;
      const color = layer.color || '#000000';
      const name = layer.name || layer.file;

      const kmlLayer = omnivore.kml(url);

      kmlLayer.on('ready', function() {
        try {
          kmlLayer.eachLayer(l => {
            if (l.setStyle) {
              l.setStyle({ color: color, weight: 3, opacity: 0.85 });
            }
          });
        } catch(e) { console.warn(e); }

        layerObjects[name] = kmlLayer;
        boundsGroup.addLayer(kmlLayer);
        if (boundsGroup.getBounds().isValid()) {
          map.fitBounds(boundsGroup.getBounds());
        }
      });

      kmlLayer.addTo(map);

      // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –ª–µ–≥–µ–Ω–¥—ã
      const legend = document.getElementById('legend-items');
      const item = document.createElement('div');
      item.className = 'legend-item';
      item.innerHTML = `
        <div class="legend-line" style="background:${color}"></div>
        <div>${name}</div>
      `;
      legend.appendChild(item);

      item.addEventListener('click', () => {
        const layerObj = layerObjects[name];
        if (layerObj && layerObj.getBounds && layerObj.getBounds().isValid()) {
          map.flyToBounds(layerObj.getBounds(), { maxZoom: 14 });
        }
      });
    });
  })
  .catch(err => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ layers.json:', err));

// === –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è ===
let routeControl = null;
let destinationMarker = null;

// –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –º–∞—Ä—à—Ä—É—Ç–∞
function getTravelMode() {
  const selected = document.querySelector('input[name="travel"]:checked');
  return selected ? selected.value : "driving";
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–µ
map.on('click', e => {
  const dest = e.latlng;

  if (destinationMarker) map.removeLayer(destinationMarker);
  destinationMarker = L.marker(dest).addTo(map);

  // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –º–∞—Ä—à—Ä—É—Ç
  if (routeControl) {
    map.removeControl(routeControl);
    routeControl = null;
  }

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(pos => {
      const start = L.latLng(pos.coords.latitude, pos.coords.longitude);
      const profile = getTravelMode(); // "driving" –∏–ª–∏ "foot"
      
      // üëá –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –≤ URL OSRM
      routeControl = L.Routing.control({
        waypoints: [start, dest],
        lineOptions: {
          styles: [{ color: profile === "foot" ? "#00b300" : "#0078ff", weight: 5 }]
        },
        router: L.Routing.osrmv1({
          serviceUrl: `https://router.project-osrm.org/route/v1/${profile}`
        }),
        createMarker: function() { return null; },
        routeWhileDragging: false,
        addWaypoints: false,
        draggableWaypoints: false,
        fitSelectedRoutes: true,
        show: false
      }).addTo(map);
    }, () => {
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ");
    });
  } else {
    alert("–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é");
  }
});
